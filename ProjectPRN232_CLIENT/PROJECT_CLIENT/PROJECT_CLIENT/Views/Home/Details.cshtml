@using System.Security.Claims
@model PROJECT_CLIENT.DTO.ArticleDTO
@{
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var userRole = User.FindFirst(ClaimTypes.Role)?.Value ?? User.FindFirst("role")?.Value;
}

<style>
    body {
        font-family: Arial, sans-serif;
        line-height: 1.6;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
    }

    .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 0;
        background-color: #fff;
        border: 1px solid #ddd;
    }

    .header {
        background-color: #0066cc;
        color: #fff;
        padding: 10px 20px;
        text-align: center;
        font-size: 1.5em;
        font-weight: bold;
    }

    .article-content {
        padding: 20px;
    }

    .article-title {
        font-size: 2em;
        color: #0066cc;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .article-meta {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
    }

        .article-meta img {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .article-meta span {
            margin-right: 10px;
        }

    .social-buttons {
        margin-bottom: 15px;
    }

        .social-buttons button {
            background-color: #0066cc;
            color: #fff;
            border: none;
            padding: 5px 10px;
            margin-right: 5px;
            border-radius: 3px;
            cursor: pointer;
        }

            .social-buttons button:hover {
                background-color: #0052a3;
            }

    .article-image {
        max-width: 100%;
        height: auto;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .article-text {
        font-size: 1.1em;
        color: #333;
        line-height: 1.8;
    }

    .like-comment {
        margin-top: 15px;
        display: flex;
        align-items: center;
    }

        .like-comment button {
            background-color: #0066cc;
            color: #fff;
            border: none;
            padding: 5px 10px;
            margin-right: 10px;
            border-radius: 3px;
            cursor: pointer;
        }

            .like-comment button:hover {
                background-color: #0052a3;
            }

    .comment-section {
        margin-top: 20px;
        border-top: 1px solid #ddd;
        padding-top: 20px;
    }

    .comment-box {
        background-color: #f9f9f9;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        border: 1px solid #eee;
    }

    .comment-meta {
        font-size: 0.9em;
        color: #666;
        margin-bottom: 5px;
    }

    .comment-content {
        margin-top: 5px;
        color: #333;
    }

    .comment-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        margin-bottom: 10px;
        resize: vertical;
    }

    .btn-submit-comment {
        background-color: #0066cc;
        color: #fff;
        border: none;
        padding: 8px 15px;
        border-radius: 3px;
        cursor: pointer;
    }

        .btn-submit-comment:hover {
            background-color: #0052a3;
        }

    #related-articles {
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #ddd;
    }

        #related-articles h4 {
            color: #0066cc;
            margin-bottom: 10px;
        }

        #related-articles li {
            margin-bottom: 10px;
        }

        #related-articles a {
            text-decoration: none;
            color: #0066cc;
        }

            #related-articles a:hover {
                text-decoration: underline;
            }

    .footer {
        background-color: #0066cc;
        color: #fff;
        text-align: center;
        padding: 10px;
        margin-top: 20px;
    }
</style>

<div class="container">
    
    <div class="article-content">
        <!-- Tiêu đề bài viết -->
        <h1 class="article-title">@Model.NewsTitle</h1>

        <!-- Thông tin meta -->
        <div class="article-meta">
            <img src="https://static.thanhnien.com.vn/thanhnien.vn/image/ava_inter.png" alt="Author Avatar" />
            <span>@Model.CreatedByName</span>
            <span>@Model.CreatedDate.ToString("dd/MM/yyyy HH:mm") GMT+7</span>
        </div>

        <!-- Ảnh bài viết -->
        @if (!string.IsNullOrEmpty(Model.ImagePath))
        {
            <img src="@Model.ImagePath" class="article-image" alt="article image" />
        }
        <!-- Nội dung bài viết -->
        <div class="article-text">
            @Model.NewsContent
        </div>  
    </div>
<!-- Thông tin bài viết -->
<p><strong>Chuyên mục:</strong> @Model.CategoryName</p>

<p>
    <strong>Tags:</strong>
    @foreach (var tag in Model.Tags)
    {
        <a href="/NewsByTag/@tag.TagId" class="text-blue-500 hover:underline mr-2">
            @tag.TagName
        </a>
    }
</p>

<p><strong>Nguồn:</strong> @Model.NewsSource</p>



<div class="mt-3">
    <button id="like-button" class="btn btn-outline-danger btn-sm">
        ❤️ <span id="like-text">Thích</span> (<span id="like-count">0</span>)
    </button>
</div>
<input type="hidden" id="jwt-token" value="@User.FindFirst("AccessToken")?.Value" />

<hr/>
<!-- Render Partial View để hiển thị bình luận -->
<partial name="_CommentSection" model="Model.NewsArticleId" />

<h4 class="text-purple mt-5">📰 Bài viết cùng chuyên mục</h4>
<ul id="related-articles" class="list-unstyled ps-3">
    <li>Đang tải bài viết liên quan...</li>
</ul>
</div>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const categoryId = @Model.CategoryId;
            const currentArticleId = @Model.NewsArticleId;

            fetch(`https://localhost:7281/api/News?$filter=CategoryId eq ${categoryId} and NewsStatus eq 1 and NewsArticleId ne ${currentArticleId}&$orderby=CreatedDate desc&$top=5`)
                .then(res => res.json())
                .then(data => {
                    const list = data;  // ✅ Dữ liệu là mảng trực tiếp, không có .value
                    const container = document.getElementById("related-articles");
                    container.innerHTML = "";

                    if (!list || list.length === 0) {
                        container.innerHTML = "<li>Không có bài viết liên quan.</li>";
                        return;
                    }

                    list.forEach(item => {
                        const li = document.createElement("li");
                        li.innerHTML = `
                                    <a href="/NewDetails/${item.newsArticleId}" class="text-decoration-none text-dark">
                                        ${item.newsTitle || "Không có tiêu đề"}
                                    </a>`;
                        container.appendChild(li);
                    });
                })
                .catch(err => {
                    console.error("Lỗi khi tải dữ liệu bài viết liên quan:", err);
                    document.getElementById("related-articles").innerHTML = "<li>Lỗi khi tải dữ liệu.</li>";
                });
        });
    </script>
}


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const articleId = @Model.NewsArticleId;
        const likeBtn = document.getElementById("like-button");
        const likeText = document.getElementById("like-text");
        const likeCountSpan = document.getElementById("like-count");

        const apiUrl = "https://localhost:7281/api/NewsLike";
        const token = document.getElementById("jwt-token")?.value;

        function isLoggedIn() {
            return token !== null && token !== "";
        }

        function loadLikeInfo() {
            fetch(`${apiUrl}/count/${articleId}`)
                .then(res => res.json())
                .then(count => {
                    likeCountSpan.innerText = count;
                });

            if (isLoggedIn()) {
                fetch(`${apiUrl}/liked/${articleId}`, {
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                })
                    .then(res => res.json())
                    .then(liked => {
                        updateLikeButton(liked);
                        likeBtn.setAttribute("data-liked", liked);
                    });
            } else {
                updateLikeButton(false);
                likeBtn.setAttribute("data-liked", false);
            }
        }

        function updateLikeButton(liked) {
            if (liked === true || liked === "true") {
                likeBtn.classList.remove("btn-outline-danger");
                likeBtn.classList.add("btn-danger");
                likeText.innerText = "Đã thích";
            } else {
                likeBtn.classList.remove("btn-danger");
                likeBtn.classList.add("btn-outline-danger");
                likeText.innerText = "Thích";
            }
        }

        likeBtn.addEventListener("click", () => {
            if (!isLoggedIn()) {
                alert("Vui lòng đăng nhập để tiếp tục.");
                window.location.href = "/Login";
                return;
            }

            const isLiked = likeBtn.getAttribute("data-liked") === "true";

            const url = isLiked
                ? `${apiUrl}?articleId=${articleId}`
                : apiUrl;

            const options = {
                method: isLiked ? "DELETE" : "POST",
                headers: {
                    "Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                }
            };

            if (!isLiked) {
                options.body = JSON.stringify({ NewsArticleId: articleId });
            }

            fetch(url, options)
                .then(res => {
                    if (res.ok) {
                        loadLikeInfo();
                    } else {
                        alert("Thao tác thất bại.");
                    }
                })
                .catch(err => {
                    console.error("Lỗi:", err);
                    alert("Không thể kết nối máy chủ.");
                });
        });

        loadLikeInfo();
    });
</script>


