@using System.Security.Claims
@model PROJECT_CLIENT.DTO.ArticleDTO
@{
    var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    var userRole = User.FindFirst(ClaimTypes.Role)?.Value ?? User.FindFirst("role")?.Value;
}

<style>
    .text-purple {
        color: #6f42c1;
    }

    .btn-purple {
        background-color: #6f42c1;
        border-color: #6f42c1;
        color: white;
    }

        .btn-purple:hover {
            background-color: #59329d;
            border-color: #59329d;
        }

    .dropdown-menu {
        min-width: 220px;
    }

    .comment-box {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 15px;
    }

    .comment-meta {
        font-size: 0.9rem;
        color: #666;
    }

    .comment-actions {
        float: right;
    }

    .comment-content {
        margin-top: 4px;
    }

    .article-image {
        max-height: 400px;
        object-fit: cover;
        width: 100%;
        border-radius: 8px;
        margin-bottom: 20px;
    }
</style>


<!-- Ảnh đầu bài -->
@if (!string.IsNullOrEmpty(Model.ImagePath))
{
    <img src="@Model.ImagePath" class="article-image" alt="article image" />
}

<!-- Thông tin bài viết -->
<h2 class="text-purple">@Model.NewsTitle</h2>
<p>@Model.NewsContent</p>
<p><strong>Chuyên mục:</strong> @Model.CategoryName</p>
<p><strong>Tác giả:</strong> @Model.CreatedByName</p>
<p>
    <strong>Tags:</strong>
    @foreach (var tag in Model.Tags)
    {
        <a href="/NewsByTag/@tag.TagId" class="text-blue-500 hover:underline mr-2">
            @tag.TagName
        </a>
    }
</p>

<p><strong>Nguồn:</strong> @Model.NewsSource</p>
<p><strong>Ngày tạo:</strong> @Model.CreatedDate.ToString("dd/MM/yyyy HH:mm")</p>


<div class="mt-3">
    <button id="like-button" class="btn btn-outline-danger btn-sm">
        ❤️ <span id="like-text">Thích</span> (<span id="like-count">0</span>)
    </button>
</div>
<input type="hidden" id="jwt-token" value="@User.FindFirst("AccessToken")?.Value" />

<hr/>
<!-- Render Partial View để hiển thị bình luận -->
<partial name="_CommentSection" model="Model.NewsArticleId" />

<!-- Form thêm bình luận -->
@* <hr />
@if (User.Identity.IsAuthenticated)
{
    <form method="post" asp-action="AddComment">
        @Html.AntiForgeryToken()
        <input type="hidden" name="ArticleId" value="@Model.Id" />
        <div class="form-group">
            <label for="Content" class="text-purple">Thêm bình luận</label>
            <textarea name="Content" class="form-control" rows="3" required></textarea>
        </div>
        <button type="submit" class="btn btn-purple mt-2">Gửi bình luận</button>
    </form>
}
else
{
    <p><em>Bạn cần <a asp-controller="Account" asp-action="Login">đăng nhập</a> để bình luận.</em></p>
}

<!-- Bảng người liên quan -->
<h4 class="mt-5 text-purple">👥 Danh sách thành viên liên quan</h4>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>UserName</th>
            <th>Vai trò</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ua in Model.UserArticles)
        {
            <tr>
                <td>@ua.UserName</td>
                <td>@ua.RoleInArticle</td>
            </tr>
        }
    </tbody>
</table> *@

<h4 class="text-purple mt-5">📰 Bài viết cùng chuyên mục</h4>
<ul id="related-articles" class="list-unstyled ps-3">
    <li>Đang tải bài viết liên quan...</li>
</ul>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const categoryId = @Model.CategoryId;
            const currentArticleId = @Model.NewsArticleId;

            fetch(`https://localhost:7281/api/News?$filter=CategoryId eq ${categoryId} and NewsStatus eq 1 and NewsArticleId ne ${currentArticleId}&$orderby=CreatedDate desc&$top=5`)
                .then(res => res.json())
                .then(data => {
                    const list = data;  // ✅ Dữ liệu là mảng trực tiếp, không có .value
                    const container = document.getElementById("related-articles");
                    container.innerHTML = "";

                    if (!list || list.length === 0) {
                        container.innerHTML = "<li>Không có bài viết liên quan.</li>";
                        return;
                    }

                    list.forEach(item => {
                        const li = document.createElement("li");
                        li.innerHTML = `
                                    <a href="/NewDetails/${item.newsArticleId}" class="text-decoration-none text-dark">
                                        ${item.newsTitle || "Không có tiêu đề"}
                                    </a>`;
                        container.appendChild(li);
                    });
                })
                .catch(err => {
                    console.error("Lỗi khi tải dữ liệu bài viết liên quan:", err);
                    document.getElementById("related-articles").innerHTML = "<li>Lỗi khi tải dữ liệu.</li>";
                });
        });
    </script>
}


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const articleId = @Model.NewsArticleId;
        const likeBtn = document.getElementById("like-button");
        const likeText = document.getElementById("like-text");
        const likeCountSpan = document.getElementById("like-count");

        const apiUrl = "https://localhost:7281/api/NewsLike";
        const token = document.getElementById("jwt-token")?.value;

        function isLoggedIn() {
            return token !== null && token !== "";
        }

        function loadLikeInfo() {
            fetch(`${apiUrl}/count/${articleId}`)
                .then(res => res.json())
                .then(count => {
                    likeCountSpan.innerText = count;
                });

            if (isLoggedIn()) {
                fetch(`${apiUrl}/liked/${articleId}`, {
                    headers: {
                        "Authorization": "Bearer " + token
                    }
                })
                    .then(res => res.json())
                    .then(liked => {
                        updateLikeButton(liked);
                        likeBtn.setAttribute("data-liked", liked);
                    });
            } else {
                updateLikeButton(false);
                likeBtn.setAttribute("data-liked", false);
            }
        }

        function updateLikeButton(liked) {
            if (liked === true || liked === "true") {
                likeBtn.classList.remove("btn-outline-danger");
                likeBtn.classList.add("btn-danger");
                likeText.innerText = "Đã thích";
            } else {
                likeBtn.classList.remove("btn-danger");
                likeBtn.classList.add("btn-outline-danger");
                likeText.innerText = "Thích";
            }
        }

        likeBtn.addEventListener("click", () => {
            if (!isLoggedIn()) {
                alert("Vui lòng đăng nhập để tiếp tục.");
                window.location.href = "/Login";
                return;
            }

            const isLiked = likeBtn.getAttribute("data-liked") === "true";

            const url = isLiked
                ? `${apiUrl}?articleId=${articleId}`
                : apiUrl;

            const options = {
                method: isLiked ? "DELETE" : "POST",
                headers: {
                    "Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                }
            };

            if (!isLiked) {
                options.body = JSON.stringify({ NewsArticleId: articleId });
            }

            fetch(url, options)
                .then(res => {
                    if (res.ok) {
                        loadLikeInfo();
                    } else {
                        alert("Thao tác thất bại.");
                    }
                })
                .catch(err => {
                    console.error("Lỗi:", err);
                    alert("Không thể kết nối máy chủ.");
                });
        });

        loadLikeInfo();
    });
</script>




@* @{
    var articleId1 = Model.NewsArticleId;
}

@section Scripts {
    <script>
        const articleId1 = @articleId1;
        const cookieKey = `ViewedArticle_${articleId}`;
        const expireMinutes = 30;

        function setCookie(name, value, minutes) {
            const d = new Date();
            d.setTime(d.getTime() + (minutes * 60 * 1000));
            const expires = "expires=" + d.toUTCString();
            document.cookie = `${name}=${value};${expires};path=/;SameSite=Lax;Secure`;
        }


        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
            return null;
        }

        // Chỉ gọi API tăng view nếu chưa xem
        if (!getCookie(cookieKey)) {
            fetch(`/api/news/${articleId}/increase-view`, {
                method: 'POST'
            }).then(res => {
                if (res.ok) {
                    setCookie(cookieKey, "true", expireMinutes);
                    console.log("Tăng lượt xem bài viết");
                }
            }).catch(err => {
                console.error("Lỗi khi tăng view:", err);
            });
        }
    </script>
} *@
